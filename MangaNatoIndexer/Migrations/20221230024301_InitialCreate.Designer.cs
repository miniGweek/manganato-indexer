// <auto-generated />
using System;
using MangaNatoIndexer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MangaNatoIndexer.Migrations
{
    [DbContext(typeof(ManganatoDbContext))]
    [Migration("20221230024301_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MangaNatoIndexer.Manga", b =>
                {
                    b.Property<int>("MangaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MangaId"));

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChapterCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastChapterUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("RecordCreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("MangaId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("MangaNatoIndexer.MangaAndTags", b =>
                {
                    b.Property<int>("MangaAndTagsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MangaAndTagsId"));

                    b.Property<int>("MangaId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("MangaAndTagsId");

                    b.HasIndex("MangaId");

                    b.HasIndex("TagId");

                    b.ToTable("MangaAndTags");
                });

            modelBuilder.Entity("MangaNatoIndexer.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Action"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Adult"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Adventure"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Comedy"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Cooking"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Doujinshi"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Drama"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Ecchi"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Erotica"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Fantasy"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Gender bender"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Harem"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "Historical"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Isekai"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Josei"
                        },
                        new
                        {
                            TagId = 17,
                            TagName = "Manhua"
                        },
                        new
                        {
                            TagId = 18,
                            TagName = "Manhwa"
                        },
                        new
                        {
                            TagId = 19,
                            TagName = "Martial arts"
                        },
                        new
                        {
                            TagId = 20,
                            TagName = "Mature"
                        },
                        new
                        {
                            TagId = 21,
                            TagName = "Mecha"
                        },
                        new
                        {
                            TagId = 22,
                            TagName = "Medical"
                        },
                        new
                        {
                            TagId = 23,
                            TagName = "Mystery"
                        },
                        new
                        {
                            TagId = 24,
                            TagName = "One shot"
                        },
                        new
                        {
                            TagId = 25,
                            TagName = "Pornographic"
                        },
                        new
                        {
                            TagId = 26,
                            TagName = "Psychological"
                        },
                        new
                        {
                            TagId = 27,
                            TagName = "Romance"
                        },
                        new
                        {
                            TagId = 28,
                            TagName = "School life"
                        },
                        new
                        {
                            TagId = 29,
                            TagName = "Sci fi"
                        },
                        new
                        {
                            TagId = 30,
                            TagName = "Seinen"
                        },
                        new
                        {
                            TagId = 31,
                            TagName = "Shoujo"
                        },
                        new
                        {
                            TagId = 32,
                            TagName = "Shoujo ai"
                        },
                        new
                        {
                            TagId = 33,
                            TagName = "Shounen"
                        },
                        new
                        {
                            TagId = 34,
                            TagName = "Shounen ai"
                        },
                        new
                        {
                            TagId = 35,
                            TagName = "Slice of life"
                        },
                        new
                        {
                            TagId = 36,
                            TagName = "Smut"
                        },
                        new
                        {
                            TagId = 37,
                            TagName = "Sports"
                        },
                        new
                        {
                            TagId = 38,
                            TagName = "Supernatural"
                        },
                        new
                        {
                            TagId = 39,
                            TagName = "Tragedy"
                        },
                        new
                        {
                            TagId = 40,
                            TagName = "Webtoons"
                        },
                        new
                        {
                            TagId = 41,
                            TagName = "Yaoi"
                        },
                        new
                        {
                            TagId = 42,
                            TagName = "Yuri"
                        });
                });

            modelBuilder.Entity("MangaNatoIndexer.MangaAndTags", b =>
                {
                    b.HasOne("MangaNatoIndexer.Manga", "Manga")
                        .WithMany()
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MangaNatoIndexer.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manga");

                    b.Navigation("Tag");
                });
#pragma warning restore 612, 618
        }
    }
}
